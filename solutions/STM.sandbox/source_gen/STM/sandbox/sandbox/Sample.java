package STM.sandbox.sandbox;

/*Generated by MPS */

import MoneyRuntime.classes.Money;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;

public class Sample {
  private String title;

  public Sample(final String title) {
    this.title = title;
  }

  @Override
  public String toString() {
    return title;
  }

  public static void main(final String[] args) {
    if (!(false)) {
      String s = Sample.create();
      Sample demo = new Sample(s);
      System.out.println("Title: " + demo.title);
    }



    // editor actions for money when they do not end with a constant 
    // convert to needs a type rule demanding MoneyConversion, MoneyConversionType may not be needed 
    // edit MoneyConversion as tables 
    // use MoneyConversion to do conversions 
    // Add unit tests for some of the language elements 

    final Money money = new Money(20, "usd");
    if (money.getCurrency() != "usd") {
      int value1 = 10;
      System.out.println("Result: " + value1);
      System.out.println("1");
      System.out.println("2");
      System.out.println("3");
      System.out.println("4");

    } else {
      int value2 = 20;
      System.out.println("Alternative result: " + value2);
      System.out.println("Foo");
      System.out.println("Bar");
    }
    Map<String, Object> person = MapSequence.fromMap(new HashMap<String, Object>());
    MapSequence.fromMap(person).put("name", "Joe");
    MapSequence.fromMap(person).put("age", 29);
    MapSequence.fromMap(person).put("gender", "male");

    int discount = <!TextGen not found for 'DecisionTable.structure.DecisionTable'!>;

    System.out.println("Value: " + discount);
    return;
  }

  private static String create() {
    return "Demo";
  }

  public static boolean isBaby(Map<String, Object> person) {
    return MapSequence.fromMap(person).get("age") <= 2;
  }

  public static boolean isChild(Map<String, Object> person) {
    return MapSequence.fromMap(person).get("age") < 18 && MapSequence.fromMap(person).get("age") > 2;
  }

  public static boolean isAdult(Map<String, Object> person) {
    return MapSequence.fromMap(person).get("age") <= 60 && MapSequence.fromMap(person).get("age") >= 18;
  }

  public static boolean isRetired(Map<String, Object> person) {
    return MapSequence.fromMap(person).get("age") > 60;
  }

  public static boolean isMale(Map<String, Object> person) {
    if (MapSequence.fromMap(person).get("gender") == "male") {
      return true;
    }
    return false;
  }

  public static boolean isFemale(Map<String, Object> person) {
    return !(isMale(person));
  }
}
