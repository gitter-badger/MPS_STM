package STM.sandbox.sandbox;

/*Generated by MPS */

import org.multiverse.api.StmUtils;
import org.multiverse.api.closures.AtomicClosure;
import org.multiverse.api.Transaction;
import MoneyRuntime.classes.Money;

public class Sample {
  private String title;

  public Sample(final String title) {
    this.title = title;
  }

  @Override
  public String toString() {
    return title;
  }

  public static void main(final String[] args) {
    new Thread(new Runnable() {
      public void run() {
        if (!(false)) {
          int result = StmUtils.execute(new AtomicClosure<Integer>() {
            public Integer execute(Transaction p0) throws Exception {
              String s = Sample.create();
              Sample demo = new Sample(s);
              System.out.println("Title: " + demo.title);
              return 10;
            }
          });
          System.out.println("Result: " + result);
        }
      }
    }).start();



    // editor actions for money when they do not end with a constant 
    // convert to needs a type rule demanding MoneyConversion, MoneyConversionType may not be needed 
    // edit MoneyConversion as tables 
    // use MoneyConversion to do conversions 
    // Add unit tests for some of the language elements 

    final Money money = new Money(20, "usd");

    if (money.getCurrency() != "usd") {
      int value1 = 10;
      System.out.println("Result: " + value1);
      System.out.println("1");
      System.out.println("2");
      System.out.println("3");
      System.out.println("4");

    } else {
      int value2 = 20;
      System.out.println("Alternative result: " + value2);
      System.out.println("Foo");
      System.out.println("Bar");
    }
  }

  private static String create() {
    return "Demo";
  }
}
