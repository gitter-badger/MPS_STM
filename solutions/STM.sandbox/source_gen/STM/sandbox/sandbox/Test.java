package STM.sandbox.sandbox;

/*Generated by MPS */

import org.multiverse.api.StmUtils;
import org.multiverse.api.closures.AtomicClosure;
import org.multiverse.api.Transaction;
import org.multiverse.api.closures.AtomicVoidClosure;

public class Test {
  private static long counter = 0;

  public Test() {
  }

  public static void main(String[] args) throws Exception {
    System.out.println("Foo");
    org.multiverse.api.StmUtils.executeChecked(new org.multiverse.api.closures.AtomicVoidClosure() {public void execute(org.multiverse.api.Transaction transaction) throws java.lang.Exception {
        System.out.println("Bar");
        org.multiverse.api.StmUtils.executeChecked(new org.multiverse.api.closures.AtomicVoidClosure() {public void execute(org.multiverse.api.Transaction transaction) throws java.lang.Exception {
            System.out.println("Baz");
            System.out.println("Baz");
            System.out.println("Baz");};
});};
});
    Test.atomicClosureProcessing();

    Test.asyncProcessing();

    System.out.println("Done");
  }

  public static void increment() {
    long localCounter = counter;
    Thread.yield();
    counter = localCounter + 1;
  }

  private static void atomicClosureProcessing() throws InterruptedException {
    String at = StmUtils.execute(new AtomicClosure<String>() {
      public String execute(Transaction p0) throws Exception {
        System.out.println("Running the first atomic block");
        return "Hey dude, howdy?";
      }
    });

    System.out.println("Result 1: " + at);

    int at2 = StmUtils.execute(new AtomicClosure<Integer>() {
      public Integer execute(Transaction p0) throws Exception {
        System.out.println("Running the second atomic block");
        return 10;
      }
    });
    System.out.println("Result 2: " + at2);

    new Thread(new Runnable() {
      public void run() {
        StmUtils.execute(new AtomicVoidClosure() {
          public void execute(Transaction p0) throws Exception {
            System.out.println("Running atomically from within a thread");
            for (int i = 0; i < 1000; i++) {
              increment();
            }
            increment();
          }
        });
      }
    }).start();
    Thread.yield();
    StmUtils.execute(new AtomicVoidClosure() {
      public void execute(Transaction p0) throws Exception {
        System.out.println("Atomic closure running");
        for (int i = 0; i < 1000; i++) {
          increment();
        }

        increment();
      }
    });

    Thread.sleep(2000);
    System.out.println("Counter: " + counter);
  }

  private static void asyncProcessing() {
    new Thread(new Runnable() {
      public void run() {
        System.out.println("Running asynchronously");
      }
    }).start();
  }
}
