package STM.sandbox.sandbox;

/*Generated by MPS */

import org.multiverse.api.references.IntRef;
import org.multiverse.api.StmUtils;
import org.multiverse.api.closures.AtomicVoidClosure;
import org.multiverse.api.Transaction;
import org.multiverse.api.closures.AtomicClosure;

public class STMSample {
  public STMSample() {
  }

  public static void main(String[] args) throws InterruptedException {
    final STMSample.Account a1 = new STMSample.Account();
    final STMSample.Account a2 = new STMSample.Account();
    a1.credit(100);
    a2.credit(100);
    STMSample.Account.transfer(a1, a2, 50);

    // Make sure you have assertions enabled when running the sample 
    //  - add -ea to the VM parameters field in the Run Confirationgu 
    assert a1.currentBalance() == 50;
    assert a2.currentBalance() == 150;

    new Thread(new Runnable() {
      public void run() {
        STMSample.Account.transfer(a2, a1, 30);
      }
    }).start();
    new Thread(new Runnable() {
      public void run() {
        STMSample.Account.transfer(a1, a2, 20);
      }
    }).start();
    new Thread(new Runnable() {
      public void run() {
        STMSample.Account.transfer(a1, a2, 10);
      }
    }).start();
    Thread.sleep(1000);
    assert a1.currentBalance() == 50;
    assert a2.currentBalance() == 150;
  }

  public static class Account {
    private IntRef counter = StmUtils.newIntRef(0);

    public Account() {
    }

    public void debit(final int amount) {
      StmUtils.execute(new AtomicVoidClosure() {
        public void execute(Transaction p0) throws Exception {
          int value = counter.get();
          counter.set(value - amount);
        }
      });
    }

    public void credit(final int amount) {
      StmUtils.execute(new AtomicVoidClosure() {
        public void execute(Transaction p0) throws Exception {
          int value = counter.get();
          counter.set(value + amount);
        }
      });
    }

    public int currentBalance() {
      return StmUtils.execute(new AtomicClosure<Integer>() {
        public Integer execute(Transaction p0) throws Exception {
          return counter.get();
        }
      });
    }

    public static void transfer(final STMSample.Account from, final STMSample.Account to, final int amount) {
      StmUtils.execute(new AtomicVoidClosure() {
        public void execute(Transaction p0) throws Exception {
          from.debit(amount);
          to.credit(amount);
        }
      });
    }
  }
}
