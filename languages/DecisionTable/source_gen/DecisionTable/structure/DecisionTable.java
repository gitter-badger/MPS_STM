package DecisionTable.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DecisionTable extends Expression {
  public static final String concept = "DecisionTable.structure.DecisionTable";
  public static final String EXPECTED_TYPE = "expectedType";
  public static final String DEFAULT_VALUE = "defaultValue";
  public static final String COL_HEADERS = "colHeaders";
  public static final String ROW_HEADERS = "rowHeaders";
  public static final String RESULT_VALUES = "resultValues";

  public DecisionTable(SNode node) {
    super(node);
  }

  public Type getExpectedType() {
    return (Type) this.getChild(Type.class, DecisionTable.EXPECTED_TYPE);
  }

  public void setExpectedType(Type node) {
    super.setChild(DecisionTable.EXPECTED_TYPE, node);
  }

  public Expression getDefaultValue() {
    return (Expression) this.getChild(Expression.class, DecisionTable.DEFAULT_VALUE);
  }

  public void setDefaultValue(Expression node) {
    super.setChild(DecisionTable.DEFAULT_VALUE, node);
  }

  public int getColHeadersesCount() {
    return this.getChildCount(DecisionTable.COL_HEADERS);
  }

  public Iterator<Expression> colHeaderses() {
    return this.children(Expression.class, DecisionTable.COL_HEADERS);
  }

  public List<Expression> getColHeaderses() {
    return this.getChildren(Expression.class, DecisionTable.COL_HEADERS);
  }

  public void addColHeaders(Expression node) {
    this.addChild(DecisionTable.COL_HEADERS, node);
  }

  public void insertColHeaders(Expression prev, Expression node) {
    this.insertChild(prev, DecisionTable.COL_HEADERS, node);
  }

  public int getRowHeadersesCount() {
    return this.getChildCount(DecisionTable.ROW_HEADERS);
  }

  public Iterator<Expression> rowHeaderses() {
    return this.children(Expression.class, DecisionTable.ROW_HEADERS);
  }

  public List<Expression> getRowHeaderses() {
    return this.getChildren(Expression.class, DecisionTable.ROW_HEADERS);
  }

  public void addRowHeaders(Expression node) {
    this.addChild(DecisionTable.ROW_HEADERS, node);
  }

  public void insertRowHeaders(Expression prev, Expression node) {
    this.insertChild(prev, DecisionTable.ROW_HEADERS, node);
  }

  public int getResultValuesesCount() {
    return this.getChildCount(DecisionTable.RESULT_VALUES);
  }

  public Iterator<Expression> resultValueses() {
    return this.children(Expression.class, DecisionTable.RESULT_VALUES);
  }

  public List<Expression> getResultValueses() {
    return this.getChildren(Expression.class, DecisionTable.RESULT_VALUES);
  }

  public void addResultValues(Expression node) {
    this.addChild(DecisionTable.RESULT_VALUES, node);
  }

  public void insertResultValues(Expression prev, Expression node) {
    this.insertChild(prev, DecisionTable.RESULT_VALUES, node);
  }

  public static DecisionTable newInstance(SModel sm, boolean init) {
    return (DecisionTable) SModelUtil_new.instantiateConceptDeclaration("DecisionTable.structure.DecisionTable", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DecisionTable newInstance(SModel sm) {
    return DecisionTable.newInstance(sm, false);
  }
}
