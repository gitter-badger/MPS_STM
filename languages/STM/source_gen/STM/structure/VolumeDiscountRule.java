package STM.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class VolumeDiscountRule extends DiscountRule {
  public static final String concept = "STM.structure.VolumeDiscountRule";
  public static final String RANKS = "ranks";

  public VolumeDiscountRule(SNode node) {
    super(node);
  }

  public int getRanksesCount() {
    return this.getChildCount(VolumeDiscountRule.RANKS);
  }

  public Iterator<VolumeRank> rankses() {
    return this.children(VolumeRank.class, VolumeDiscountRule.RANKS);
  }

  public List<VolumeRank> getRankses() {
    return this.getChildren(VolumeRank.class, VolumeDiscountRule.RANKS);
  }

  public void addRanks(VolumeRank node) {
    this.addChild(VolumeDiscountRule.RANKS, node);
  }

  public void insertRanks(VolumeRank prev, VolumeRank node) {
    this.insertChild(prev, VolumeDiscountRule.RANKS, node);
  }

  public static VolumeDiscountRule newInstance(SModel sm, boolean init) {
    return (VolumeDiscountRule) SModelUtil_new.instantiateConceptDeclaration("STM.structure.VolumeDiscountRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static VolumeDiscountRule newInstance(SModel sm) {
    return VolumeDiscountRule.newInstance(sm, false);
  }
}
