package STM.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class WordScan extends BaseConcept implements INamedConcept {
  public static final String concept = "STM.structure.WordScan";
  public static final String WORD = "word";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PARALLEL = "parallel";
  public static final String URLS = "urls";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public WordScan(SNode node) {
    super(node);
  }

  public String getWord() {
    return this.getProperty(WordScan.WORD);
  }

  public void setWord(String value) {
    this.setProperty(WordScan.WORD, value);
  }

  public String getName() {
    return this.getProperty(WordScan.NAME);
  }

  public void setName(String value) {
    this.setProperty(WordScan.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(WordScan.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(WordScan.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(WordScan.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(WordScan.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(WordScan.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(WordScan.VIRTUAL_PACKAGE, value);
  }

  public Parallelism getParallel() {
    String value = super.getProperty(WordScan.PARALLEL);
    return Parallelism.parseValue(value);
  }

  public void setParallel(Parallelism value) {
    super.setProperty(WordScan.PARALLEL, value.getValueAsString());
  }

  public int getUrlsesCount() {
    return this.getChildCount(WordScan.URLS);
  }

  public Iterator<URL> urlses() {
    return this.children(URL.class, WordScan.URLS);
  }

  public List<URL> getUrlses() {
    return this.getChildren(URL.class, WordScan.URLS);
  }

  public void addUrls(URL node) {
    this.addChild(WordScan.URLS, node);
  }

  public void insertUrls(URL prev, URL node) {
    this.insertChild(prev, WordScan.URLS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(WordScan.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, WordScan.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, WordScan.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(WordScan.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, WordScan.SMODEL_ATTRIBUTE, node);
  }

  public static WordScan newInstance(SModel sm, boolean init) {
    return (WordScan) SModelUtil_new.instantiateConceptDeclaration("STM.structure.WordScan", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static WordScan newInstance(SModel sm) {
    return WordScan.newInstance(sm, false);
  }
}
