package STM.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_AtomicExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_AtomicExpression_InferenceRule() {
  }

  public void applyRule(final SNode ae, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode RETVAL_typevar_1285780675014264748 = typeCheckingContext.createNewRuntimeTypesVariable();
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(ae, "closure", true);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:e6079913-aa9e-461d-bc1e-2cc74467e225(STM.typesystem)", "1285780675014264737", 0, null);
      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:e6079913-aa9e-461d-bc1e-2cc74467e225(STM.typesystem)", "1285780675014264729", true), (SNode) new typeof_AtomicExpression_InferenceRule.QuotationClass_540c1v_a0a1a0().createNode(typeCheckingContext.getRepresentative(RETVAL_typevar_1285780675014264748), typeCheckingContext), false, true, _info_12389875345);
    }

    // <node> 
    // <node> 
    // <node> 

    {
      final SNode ret = typeCheckingContext.getRepresentative(RETVAL_typevar_1285780675014264748);
      typeCheckingContext.whenConcrete(ret, new Runnable() {
        public void run() {
          for (SNode t : SLinkOperations.getTargets(SNodeOperations.as(typeCheckingContext.getRepresentative(ret), "jetbrains.mps.lang.typesystem.structure.MeetType"), "argument", true)) {
            if (!(SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.VoidType"))) {
              {
                SNode _nodeToCheck_1029348928467 = ae;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:e6079913-aa9e-461d-bc1e-2cc74467e225(STM.typesystem)", "4726057507308948494", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:e6079913-aa9e-461d-bc1e-2cc74467e225(STM.typesystem)", "4726057507308948491", true), (SNode) t, _info_12389875345);
              }
              return;
            }
          }
          {
            SNode _nodeToCheck_1029348928467 = ae;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:e6079913-aa9e-461d-bc1e-2cc74467e225(STM.typesystem)", "4726057507308948506", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:e6079913-aa9e-461d-bc1e-2cc74467e225(STM.typesystem)", "4726057507308948503", true), (SNode) typeCheckingContext.getRepresentative(ret), _info_12389875345);
          }
        }
      }, "r:e6079913-aa9e-461d-bc1e-2cc74467e225(STM.typesystem)", "4726057507308948432", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "STM.structure.AtomicExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  public static class QuotationClass_540c1v_a0a1a0 {
    public QuotationClass_540c1v_a0a1a0() {
    }

    public SNode createNode(Object parameter_5, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.FunctionType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2, typeCheckingContext);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("resultType", HUtil.copyIfNecessary(quotedNode1_4, typeCheckingContext));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.FunctionType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("resultType", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
