package STM.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class UnwrapAtomicExpression_Intention extends BaseIntention implements Intention {
  public UnwrapAtomicExpression_Intention() {
  }

  public String getConcept() {
    return "STM.structure.AtomicExpression";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Unwrap Atomic Expression";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    List<SNode> selectedNodes = (List<SNode>) editorContext.getSelectedNodes();
    SNode atomicExpression = SNodeOperations.getAncestor(ListSequence.fromList(selectedNodes).first(), "STM.structure.AtomicExpression", true, false);
    return atomicExpression == node;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode atomicExpression = node;
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(atomicExpression), "jetbrains.mps.baseLanguage.structure.Statement")) {
      final SNode statementList = SNodeOperations.getAncestor(atomicExpression, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
      SNode statement = SNodeOperations.getAncestor(atomicExpression, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
      final Wrappers._int index = new Wrappers._int(ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).indexOf(statement));
      ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).removeElementAt(index.value);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(atomicExpression, "closure", true), "body", true), "statement", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).insertElement(index.value, it);
          index.value += 1;
        }
      });
    } else {
      SNode statement = SNodeFactoryOperations.replaceWithNewChild(atomicExpression, "jetbrains.mps.baseLanguage.structure.DotExpression");
      SLinkOperations.setTarget(statement, "operand", SLinkOperations.getTarget(atomicExpression, "closure", true), true);
      SLinkOperations.setTarget(statement, "operation", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation", null), true);
    }
    SNodeOperations.deleteNode(atomicExpression);
  }

  public String getLocationString() {
    return "STM.intentions";
  }
}
