package SampleExtensions.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MyIfStatement extends Statement {
  public static final String concept = "SampleExtensions.structure.MyIfStatement";
  public static final String CONDITION = "condition";
  public static final String BODY = "body";
  public static final String ALTERNATIVE = "alternative";

  public MyIfStatement(SNode node) {
    super(node);
  }

  public Expression getCondition() {
    return (Expression) this.getChild(Expression.class, MyIfStatement.CONDITION);
  }

  public void setCondition(Expression node) {
    super.setChild(MyIfStatement.CONDITION, node);
  }

  public TrueFlow getBody() {
    return (TrueFlow) this.getChild(TrueFlow.class, MyIfStatement.BODY);
  }

  public void setBody(TrueFlow node) {
    super.setChild(MyIfStatement.BODY, node);
  }

  public FalseFlow getAlternative() {
    return (FalseFlow) this.getChild(FalseFlow.class, MyIfStatement.ALTERNATIVE);
  }

  public void setAlternative(FalseFlow node) {
    super.setChild(MyIfStatement.ALTERNATIVE, node);
  }

  public static MyIfStatement newInstance(SModel sm, boolean init) {
    return (MyIfStatement) SModelUtil_new.instantiateConceptDeclaration("SampleExtensions.structure.MyIfStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MyIfStatement newInstance(SModel sm) {
    return MyIfStatement.newInstance(sm, false);
  }
}
